# -*- coding: utf-8 -*-
"""LVADSUSR81_DENISHAPRIYAG_LAB1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uAgJAp2Bb1Ux38mJESU39PglXpLlXJvz
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score,classification_report

df = pd.read_csv('/content/drive/MyDrive/loan_approval.csv')
df.columns.tolist()

df.info()

df.isnull().sum()
#df.fillna(method='ffill')
#df.isnull().sum()

#----------handle duplicates-----------
df.duplicated().sum()
# df.drop_duplicates(inplace=True)

df.describe()

numerical_columns = df.columns[df.dtypes != "object"]
numerical_columns

# before removing outliers
for i in numerical_columns:
  plt.figure(figsize = (10,6))
  sns.boxplot(data=df[i])
  plt.title(i)
  plt.ylabel('Values')
  plt.xticks(rotation = 45)
  plt.show()

# remove outliers
def detect_and_treat_outliers(df,columns):

  for col in columns:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    median = df[col].median()
    df[col] = np.where((df[col] < lower_bound) | (df[col] > upper_bound), median, df[col])

  return df

df = detect_and_treat_outliers(df,numerical_columns)
numerical_columns = df.columns[df.dtypes != "object"]

# after removing outliers
for i in numerical_columns:
  plt.figure(figsize = (10,6))
  sns.boxplot(data=df[i])
  plt.title(i)
  plt.ylabel('Values')
  plt.xticks(rotation = 45)
  plt.show()

categorical_columns = df.columns[df.dtypes == "object"]
categorical_columns

for i in categorical_columns:
  plt.figure(figsize = (5,5))
  sns.scatterplot(data=df[i])
  plt.title(i)
  plt.ylabel('Values')
  plt.xticks(rotation = 45)
  plt.show()

#-----------encoder-----------------
label_encoder = preprocessing.LabelEncoder()
df[' education'] = label_encoder.fit_transform(df[' education'])
df[' self_employed'] = label_encoder.fit_transform(df[' self_employed'])
df.head()

#------------feature selection ---------
x = df[[' education',' self_employed',' no_of_dependents',' income_annum',' cibil_score']]
y = df[' loan_status']

#----------splitting----------
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=.2,random_state=42)

#----------model selection--------
clf = DecisionTreeClassifier(random_state = 42)
clf.fit(x_train, y_train)
y_pred = clf.predict(x_test)
print('predicted')
print(y_pred)
print('actual test')
print(y_test)

#-------accuracy-----------
accuracy = accuracy_score(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy:.2f}')

print("Classification Report:")
print(class_report)