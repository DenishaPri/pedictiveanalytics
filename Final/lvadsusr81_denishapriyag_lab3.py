# -*- coding: utf-8 -*-
"""LVADSUSR81_DENISHAPRIYAG_LAB3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i20moDr5nOExMSEeHkxbAIvHU870Pb7U
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn import preprocessing
from sklearn.cluster import KMeans

df = pd.read_csv('/content/drive/MyDrive/seeds.csv')
df.columns.tolist()

df.isnull().sum()

df = df.fillna(df.mean())
df.isnull().sum()

df.plot(kind='scatter', x='Length of kernel', y='Width of kernel', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

# Standardize the data
scaler = StandardScaler()
scaled_data = scaler.fit_transform(df)

plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap')
plt.show()

from sklearn.cluster import KMeans
data_values = df[['Area','Perimeter','Compactness','Length of kernel','Width of kernel','Asymmetry coefficient','Length of kernel groove']].iloc[: , :].values
inertia = []
for n in range(1 , 20):
    algorithm = (KMeans(n_clusters = n ,init='k-means++', n_init = 10 ,max_iter=300,
                        tol=0.0001,  random_state= 111  , algorithm='lloyd') )
    algorithm.fit(data_values)
    inertia.append(algorithm.inertia_)

plt.figure(1,figsize=(10,6))
plt.plot(np.arange(1,20),inertia,'o')
plt.plot(np.arange(1,20),inertia,'-',alpha = 0.5)
plt.xlabel("Number of Clusters"),plt.ylabel("Inertia")
plt.show()

algorithm = (KMeans(n_clusters = 2 ,init='k-means++', n_init = 10 ,max_iter=200,
                        tol=0.0001,  random_state= 42  , algorithm='lloyd') )
algorithm.fit(data_values)
centroids = algorithm.cluster_centers_
labels = algorithm.labels_

num_clusters = 3
# Perform KMeans clustering
kmeans = KMeans(n_clusters=num_clusters)
kmeans.fit(scaled_data)
labels = kmeans.labels_

plt.scatter(data_values[:,0],data_values[:,1],c=labels,s=50,cmap="viridis",alpha=0.8)
plt.scatter(centroids[:,0],centroids[:,1],c='red',marker='o',s=110,label="Centroids")
plt.title("K-Means Clustering")
plt.legend()
plt.show()

# Output the cluster centers
print("Cluster Centers:")
cluster_centers = scaler.inverse_transform(kmeans.cluster_centers_)
for i, center in enumerate(cluster_centers):
    print(f"Cluster {i+1}:")
    for j, val in enumerate(center):
        print(f"\t{df.columns[j]}: {val}")